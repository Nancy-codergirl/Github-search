{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport let GithubServiceService = /*#__PURE__*/(() => {\n  class GithubServiceService {\n    constructor(http) {\n      this.http = http;\n      this.configUrl = 'https://api.github.com';\n    }\n\n    getRepos(userName) {\n      const url = `${this.configUrl}/users/${userName}/repos`;\n      return this.http.get(url).pipe(catchError(this.handleError('fetch users', [])));\n    }\n\n    getOrgaRepos(userName) {\n      const url = `${this.configUrl}/orgs/${userName}/repos`;\n      return this.http.get(url).pipe(catchError(this.handleError('fetch orgs', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        console.log(`${operation}. Reason: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n  }\n\n  GithubServiceService.ɵfac = function GithubServiceService_Factory(t) {\n    return new (t || GithubServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  GithubServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GithubServiceService,\n    factory: GithubServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return GithubServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}